/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs';
import {
  BuySellEvent,
  BuySellEventArgs,
  getBuySellEventDecoder,
  getBuySellEventEncoder,
} from '.';

/** Enum for events emitted by the AMM program. */
export type TAmmEvent = { __kind: 'BuySellEvent'; fields: [BuySellEvent] };

export type TAmmEventArgs = {
  __kind: 'BuySellEvent';
  fields: [BuySellEventArgs];
};

export function getTAmmEventEncoder(): Encoder<TAmmEventArgs> {
  return getDataEnumEncoder([
    [
      'BuySellEvent',
      getStructEncoder([
        ['fields', getTupleEncoder([getBuySellEventEncoder()])],
      ]),
    ],
  ]);
}

export function getTAmmEventDecoder(): Decoder<TAmmEvent> {
  return getDataEnumDecoder([
    [
      'BuySellEvent',
      getStructDecoder([
        ['fields', getTupleDecoder([getBuySellEventDecoder()])],
      ]),
    ],
  ]);
}

export function getTAmmEventCodec(): Codec<TAmmEventArgs, TAmmEvent> {
  return combineCodec(getTAmmEventEncoder(), getTAmmEventDecoder());
}

// Data Enum Helpers.
export function tAmmEvent(
  kind: 'BuySellEvent',
  data: GetDataEnumKindContent<TAmmEventArgs, 'BuySellEvent'>['fields']
): GetDataEnumKind<TAmmEventArgs, 'BuySellEvent'>;
export function tAmmEvent<K extends TAmmEventArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTAmmEvent<K extends TAmmEvent['__kind']>(
  kind: K,
  value: TAmmEvent
): value is TAmmEvent & { __kind: K } {
  return value.__kind === kind;
}
