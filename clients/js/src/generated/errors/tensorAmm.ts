/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

/** WrongWhitelist: wrong whitelist */
export const TENSOR_AMM_ERROR__WRONG_WHITELIST = 0x2ee0; // 12000
/** WrongPoolType: operation not permitted on this pool type */
export const TENSOR_AMM_ERROR__WRONG_POOL_TYPE = 0x2ee1; // 12001
/** FeesTooHigh: fees entered above allowed threshold */
export const TENSOR_AMM_ERROR__FEES_TOO_HIGH = 0x2ee2; // 12002
/** DeltaTooLarge: delta too large */
export const TENSOR_AMM_ERROR__DELTA_TOO_LARGE = 0x2ee3; // 12003
/** ArithmeticError: arithmetic error */
export const TENSOR_AMM_ERROR__ARITHMETIC_ERROR = 0x2ee4; // 12004
/** PriceMismatch: specified price not within current price */
export const TENSOR_AMM_ERROR__PRICE_MISMATCH = 0x2ee5; // 12005
/** ExistingNfts: cannot close pool with nfts in escrow -- withdraw all before closing */
export const TENSOR_AMM_ERROR__EXISTING_NFTS = 0x2ee6; // 12006
/** FeesNotAllowed: fees not allowed for non-trade pools */
export const TENSOR_AMM_ERROR__FEES_NOT_ALLOWED = 0x2ee7; // 12007
/** WrongPoolVersion: wrong pool version provided */
export const TENSOR_AMM_ERROR__WRONG_POOL_VERSION = 0x2ee8; // 12008
/** BadMintProof: bad mint proof account */
export const TENSOR_AMM_ERROR__BAD_MINT_PROOF = 0x2ee9; // 12009
/** WrongCosigner: wrong cosigner */
export const TENSOR_AMM_ERROR__WRONG_COSIGNER = 0x2eea; // 12010
/** BadSharedEscrow: bad shared escrow account */
export const TENSOR_AMM_ERROR__BAD_SHARED_ESCROW = 0x2eeb; // 12011
/** PoolOnSharedEscrow: expected a non-shared escrow pool to be passed in */
export const TENSOR_AMM_ERROR__POOL_ON_SHARED_ESCROW = 0x2eec; // 12012
/** CannotUseSharedEscrow: cannot use shared escrow in NFT pools */
export const TENSOR_AMM_ERROR__CANNOT_USE_SHARED_ESCROW = 0x2eed; // 12013
/** MaxTakerSellCountExceeded: max taker sell count exceeded, pool cannot buy anymore NFTs */
export const TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED = 0x2eee; // 12014
/** MaxTakerSellCountTooSmall: max taker sell count is too small */
export const TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL = 0x2eef; // 12015
/** StartingPriceTooSmall: starting price can't be smaller than 1 lamport */
export const TENSOR_AMM_ERROR__STARTING_PRICE_TOO_SMALL = 0x2ef0; // 12016
/** PoolInsufficientRent: Pool must keep minimum rent balance */
export const TENSOR_AMM_ERROR__POOL_INSUFFICIENT_RENT = 0x2ef1; // 12017
/** WrongRentPayer: Wrong rent payer */
export const TENSOR_AMM_ERROR__WRONG_RENT_PAYER = 0x2ef2; // 12018
/** ExpiryTooLarge: Expiry too large */
export const TENSOR_AMM_ERROR__EXPIRY_TOO_LARGE = 0x2ef3; // 12019
/** ExpiredPool: Expired Pool */
export const TENSOR_AMM_ERROR__EXPIRED_POOL = 0x2ef4; // 12020
/** PoolNotExpired: Pool not expired */
export const TENSOR_AMM_ERROR__POOL_NOT_EXPIRED = 0x2ef5; // 12021
/** InvalidPoolAmount: Invalid pool amount */
export const TENSOR_AMM_ERROR__INVALID_POOL_AMOUNT = 0x2ef6; // 12022
/** WrongMakerBroker: Wrong maker broker account */
export const TENSOR_AMM_ERROR__WRONG_MAKER_BROKER = 0x2ef7; // 12023
/** WrongOwner: Wrong owner */
export const TENSOR_AMM_ERROR__WRONG_OWNER = 0x2ef8; // 12024
/** EscrowProgramNotSet: Escrow program not set */
export const TENSOR_AMM_ERROR__ESCROW_PROGRAM_NOT_SET = 0x2ef9; // 12025
/** MissingMakerBroker: Missing maker broker account */
export const TENSOR_AMM_ERROR__MISSING_MAKER_BROKER = 0x2efa; // 12026
/** MissingCosigner: Missing cosigner account */
export const TENSOR_AMM_ERROR__MISSING_COSIGNER = 0x2efb; // 12027

export type TensorAmmError =
  | typeof TENSOR_AMM_ERROR__ARITHMETIC_ERROR
  | typeof TENSOR_AMM_ERROR__BAD_MINT_PROOF
  | typeof TENSOR_AMM_ERROR__BAD_SHARED_ESCROW
  | typeof TENSOR_AMM_ERROR__CANNOT_USE_SHARED_ESCROW
  | typeof TENSOR_AMM_ERROR__DELTA_TOO_LARGE
  | typeof TENSOR_AMM_ERROR__ESCROW_PROGRAM_NOT_SET
  | typeof TENSOR_AMM_ERROR__EXISTING_NFTS
  | typeof TENSOR_AMM_ERROR__EXPIRED_POOL
  | typeof TENSOR_AMM_ERROR__EXPIRY_TOO_LARGE
  | typeof TENSOR_AMM_ERROR__FEES_NOT_ALLOWED
  | typeof TENSOR_AMM_ERROR__FEES_TOO_HIGH
  | typeof TENSOR_AMM_ERROR__INVALID_POOL_AMOUNT
  | typeof TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED
  | typeof TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL
  | typeof TENSOR_AMM_ERROR__MISSING_COSIGNER
  | typeof TENSOR_AMM_ERROR__MISSING_MAKER_BROKER
  | typeof TENSOR_AMM_ERROR__POOL_INSUFFICIENT_RENT
  | typeof TENSOR_AMM_ERROR__POOL_NOT_EXPIRED
  | typeof TENSOR_AMM_ERROR__POOL_ON_SHARED_ESCROW
  | typeof TENSOR_AMM_ERROR__PRICE_MISMATCH
  | typeof TENSOR_AMM_ERROR__STARTING_PRICE_TOO_SMALL
  | typeof TENSOR_AMM_ERROR__WRONG_COSIGNER
  | typeof TENSOR_AMM_ERROR__WRONG_MAKER_BROKER
  | typeof TENSOR_AMM_ERROR__WRONG_OWNER
  | typeof TENSOR_AMM_ERROR__WRONG_POOL_TYPE
  | typeof TENSOR_AMM_ERROR__WRONG_POOL_VERSION
  | typeof TENSOR_AMM_ERROR__WRONG_RENT_PAYER
  | typeof TENSOR_AMM_ERROR__WRONG_WHITELIST;

let tensorAmmErrorMessages: Record<TensorAmmError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tensorAmmErrorMessages = {
    [TENSOR_AMM_ERROR__ARITHMETIC_ERROR]: `arithmetic error`,
    [TENSOR_AMM_ERROR__BAD_MINT_PROOF]: `bad mint proof account`,
    [TENSOR_AMM_ERROR__BAD_SHARED_ESCROW]: `bad shared escrow account`,
    [TENSOR_AMM_ERROR__CANNOT_USE_SHARED_ESCROW]: `cannot use shared escrow in NFT pools`,
    [TENSOR_AMM_ERROR__DELTA_TOO_LARGE]: `delta too large`,
    [TENSOR_AMM_ERROR__ESCROW_PROGRAM_NOT_SET]: `Escrow program not set`,
    [TENSOR_AMM_ERROR__EXISTING_NFTS]: `cannot close pool with nfts in escrow -- withdraw all before closing`,
    [TENSOR_AMM_ERROR__EXPIRED_POOL]: `Expired Pool`,
    [TENSOR_AMM_ERROR__EXPIRY_TOO_LARGE]: `Expiry too large`,
    [TENSOR_AMM_ERROR__FEES_NOT_ALLOWED]: `fees not allowed for non-trade pools`,
    [TENSOR_AMM_ERROR__FEES_TOO_HIGH]: `fees entered above allowed threshold`,
    [TENSOR_AMM_ERROR__INVALID_POOL_AMOUNT]: `Invalid pool amount`,
    [TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_EXCEEDED]: `max taker sell count exceeded, pool cannot buy anymore NFTs`,
    [TENSOR_AMM_ERROR__MAX_TAKER_SELL_COUNT_TOO_SMALL]: `max taker sell count is too small`,
    [TENSOR_AMM_ERROR__MISSING_COSIGNER]: `Missing cosigner account`,
    [TENSOR_AMM_ERROR__MISSING_MAKER_BROKER]: `Missing maker broker account`,
    [TENSOR_AMM_ERROR__POOL_INSUFFICIENT_RENT]: `Pool must keep minimum rent balance`,
    [TENSOR_AMM_ERROR__POOL_NOT_EXPIRED]: `Pool not expired`,
    [TENSOR_AMM_ERROR__POOL_ON_SHARED_ESCROW]: `expected a non-shared escrow pool to be passed in`,
    [TENSOR_AMM_ERROR__PRICE_MISMATCH]: `specified price not within current price`,
    [TENSOR_AMM_ERROR__STARTING_PRICE_TOO_SMALL]: `starting price can't be smaller than 1 lamport`,
    [TENSOR_AMM_ERROR__WRONG_COSIGNER]: `wrong cosigner`,
    [TENSOR_AMM_ERROR__WRONG_MAKER_BROKER]: `Wrong maker broker account`,
    [TENSOR_AMM_ERROR__WRONG_OWNER]: `Wrong owner`,
    [TENSOR_AMM_ERROR__WRONG_POOL_TYPE]: `operation not permitted on this pool type`,
    [TENSOR_AMM_ERROR__WRONG_POOL_VERSION]: `wrong pool version provided`,
    [TENSOR_AMM_ERROR__WRONG_RENT_PAYER]: `Wrong rent payer`,
    [TENSOR_AMM_ERROR__WRONG_WHITELIST]: `wrong whitelist`,
  };
}

export function getTensorAmmErrorMessage(code: TensorAmmError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tensorAmmErrorMessages as Record<TensorAmmError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}
