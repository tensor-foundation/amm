/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';

export type FeeVault<TAddress extends string = string> = Account<
  FeeVaultAccountData,
  TAddress
>;

export type MaybeFeeVault<TAddress extends string = string> = MaybeAccount<
  FeeVaultAccountData,
  TAddress
>;

export type FeeVaultAccountData = { discriminator: Array<number> };

export type FeeVaultAccountDataArgs = {};

export function getFeeVaultAccountDataEncoder(): Encoder<FeeVaultAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [192, 178, 69, 232, 58, 149, 157, 132],
    })
  );
}

export function getFeeVaultAccountDataDecoder(): Decoder<FeeVaultAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]);
}

export function getFeeVaultAccountDataCodec(): Codec<
  FeeVaultAccountDataArgs,
  FeeVaultAccountData
> {
  return combineCodec(
    getFeeVaultAccountDataEncoder(),
    getFeeVaultAccountDataDecoder()
  );
}

export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): FeeVault<TAddress>;
export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeFeeVault<TAddress>;
export function decodeFeeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): FeeVault<TAddress> | MaybeFeeVault<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFeeVaultAccountDataDecoder()
  );
}

export async function fetchFeeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<FeeVault<TAddress>> {
  const maybeAccount = await fetchMaybeFeeVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFeeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeFeeVault<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFeeVault(maybeAccount);
}

export async function fetchAllFeeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<FeeVault[]> {
  const maybeAccounts = await fetchAllMaybeFeeVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFeeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeFeeVault[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFeeVault(maybeAccount));
}

export function getFeeVaultSize(): number {
  return 8;
}
