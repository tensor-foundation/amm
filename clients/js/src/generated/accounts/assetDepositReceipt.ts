/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { AssetDepositReceiptSeeds, findAssetDepositReceiptPda } from '../pdas';

export type AssetDepositReceipt = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  asset: Address;
  pool: Address;
};

export type AssetDepositReceiptArgs = {
  bump: number;
  asset: Address;
  pool: Address;
};

export function getAssetDepositReceiptEncoder(): Encoder<AssetDepositReceiptArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['asset', getAddressEncoder()],
      ['pool', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([147, 18, 99, 58, 249, 8, 196, 221]),
    })
  );
}

export function getAssetDepositReceiptDecoder(): Decoder<AssetDepositReceipt> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['asset', getAddressDecoder()],
    ['pool', getAddressDecoder()],
  ]);
}

export function getAssetDepositReceiptCodec(): Codec<
  AssetDepositReceiptArgs,
  AssetDepositReceipt
> {
  return combineCodec(
    getAssetDepositReceiptEncoder(),
    getAssetDepositReceiptDecoder()
  );
}

export function decodeAssetDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AssetDepositReceipt, TAddress>;
export function decodeAssetDepositReceipt<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AssetDepositReceipt, TAddress>;
export function decodeAssetDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AssetDepositReceipt, TAddress>
  | MaybeAccount<AssetDepositReceipt, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAssetDepositReceiptDecoder()
  );
}

export async function fetchAssetDepositReceipt<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AssetDepositReceipt, TAddress>> {
  const maybeAccount = await fetchMaybeAssetDepositReceipt(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAssetDepositReceipt<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AssetDepositReceipt, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAssetDepositReceipt(maybeAccount);
}

export async function fetchAllAssetDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AssetDepositReceipt>[]> {
  const maybeAccounts = await fetchAllMaybeAssetDepositReceipt(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAssetDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AssetDepositReceipt>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAssetDepositReceipt(maybeAccount)
  );
}

export function getAssetDepositReceiptSize(): number {
  return 73;
}

export async function fetchAssetDepositReceiptFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AssetDepositReceiptSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<AssetDepositReceipt>> {
  const maybeAccount = await fetchMaybeAssetDepositReceiptFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAssetDepositReceiptFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: AssetDepositReceiptSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<AssetDepositReceipt>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findAssetDepositReceiptPda(seeds, { programAddress });
  return await fetchMaybeAssetDepositReceipt(rpc, address, fetchConfig);
}
