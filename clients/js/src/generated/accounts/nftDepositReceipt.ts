/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { NftDepositReceiptSeeds, findNftDepositReceiptPda } from '../pdas';

export type NftDepositReceipt = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  mint: Address;
  pool: Address;
};

export type NftDepositReceiptArgs = {
  bump: number;
  mint: Address;
  pool: Address;
};

export function getNftDepositReceiptEncoder(): Encoder<NftDepositReceiptArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['mint', getAddressEncoder()],
      ['pool', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([206, 255, 132, 254, 67, 78, 62, 96]),
    })
  );
}

export function getNftDepositReceiptDecoder(): Decoder<NftDepositReceipt> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['pool', getAddressDecoder()],
  ]);
}

export function getNftDepositReceiptCodec(): Codec<
  NftDepositReceiptArgs,
  NftDepositReceipt
> {
  return combineCodec(
    getNftDepositReceiptEncoder(),
    getNftDepositReceiptDecoder()
  );
}

export function decodeNftDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NftDepositReceipt, TAddress>;
export function decodeNftDepositReceipt<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NftDepositReceipt, TAddress>;
export function decodeNftDepositReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<NftDepositReceipt, TAddress>
  | MaybeAccount<NftDepositReceipt, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftDepositReceiptDecoder()
  );
}

export async function fetchNftDepositReceipt<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NftDepositReceipt, TAddress>> {
  const maybeAccount = await fetchMaybeNftDepositReceipt(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftDepositReceipt<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NftDepositReceipt, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftDepositReceipt(maybeAccount);
}

export async function fetchAllNftDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NftDepositReceipt>[]> {
  const maybeAccounts = await fetchAllMaybeNftDepositReceipt(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftDepositReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NftDepositReceipt>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeNftDepositReceipt(maybeAccount)
  );
}

export function getNftDepositReceiptSize(): number {
  return 73;
}

export async function fetchNftDepositReceiptFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: NftDepositReceiptSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<NftDepositReceipt>> {
  const maybeAccount = await fetchMaybeNftDepositReceiptFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftDepositReceiptFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: NftDepositReceiptSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<NftDepositReceipt>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findNftDepositReceiptPda(seeds, { programAddress });
  return await fetchMaybeNftDepositReceipt(rpc, address, fetchConfig);
}
