//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::AuthorizationDataLocal;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SellNftTokenPool {
    /// The owner of the pool and the buyer/recipient of the NFT.
    pub owner: solana_program::pubkey::Pubkey,
    /// The seller is the owner of the NFT who is selling the NFT into the pool.
    pub seller: solana_program::pubkey::Pubkey,
    /// The original rent payer of the pool--stored on the pool. Used to refund rent in case the pool
    /// is auto-closed.
    pub rent_payer: solana_program::pubkey::Pubkey,
    /// Fee vault account owned by the TFEE program.
    pub fee_vault: solana_program::pubkey::Pubkey,
    /// The Pool state account that the NFT is being sold into. Stores pool state and config,
    /// but is also the owner of any NFTs in the pool, and also escrows any SOL.
    /// Any active pool can be specified provided it is a Token type and the NFT passes at least one
    /// whitelist condition.
    pub pool: solana_program::pubkey::Pubkey,
    /// The whitelist account that the pool uses to verify the NFTs being sold into it.
    pub whitelist: solana_program::pubkey::Pubkey,
    /// Optional account which must be passed in if the NFT must be verified against a
    /// merkle proof condition in the whitelist.
    pub mint_proof: Option<solana_program::pubkey::Pubkey>,
    /// The token account of the NFT for the seller's wallet.
    pub seller_ta: solana_program::pubkey::Pubkey,
    /// The ATA of the owner, where the NFT will be transferred to as a result of this sale.
    pub owner_ata: solana_program::pubkey::Pubkey,
    /// The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale.
    pub pool_ata: solana_program::pubkey::Pubkey,
    /// The mint account of the NFT being sold.
    pub mint: solana_program::pubkey::Pubkey,
    /// The Token Metadata metadata account of the NFT.
    pub metadata: solana_program::pubkey::Pubkey,
    /// Either the legacy token program or token-2022.
    pub token_program: solana_program::pubkey::Pubkey,
    /// The SPL associated token program.
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// The Solana system program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// The Token Metadata edition account of the NFT.
    pub edition: solana_program::pubkey::Pubkey,
    /// The Token Metadata owner/buyer token record account of the NFT.
    pub owner_token_record: Option<solana_program::pubkey::Pubkey>,
    /// The Token Metadata seller/source token record account of the NFT.
    pub seller_token_record: Option<solana_program::pubkey::Pubkey>,
    /// The Token Metadata token record for the pool.
    pub pool_token_record: Option<solana_program::pubkey::Pubkey>,
    /// The Token Metadata program account.
    pub token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    /// The sysvar instructions account.
    pub sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    /// The Metaplex Token Authority Rules account that stores royalty enforcement rules.
    pub authorization_rules: Option<solana_program::pubkey::Pubkey>,
    /// The Metaplex Token Authority Rules program account.
    pub authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    /// The shared escrow account for pools that have liquidity in a shared account.
    pub shared_escrow: Option<solana_program::pubkey::Pubkey>,
    /// The account that receives the maker broker fee.
    pub maker_broker: Option<solana_program::pubkey::Pubkey>,
    /// The account that receives the taker broker fee.
    pub taker_broker: Option<solana_program::pubkey::Pubkey>,
    /// The optional cosigner account that must be passed in if the pool has a cosigner.
    /// Checks are performed in the handler.
    pub cosigner: Option<solana_program::pubkey::Pubkey>,
    /// The AMM program account, used for self-cpi logging.
    pub amm_program: solana_program::pubkey::Pubkey,
    /// The escrow program account for shared liquidity pools.
    pub escrow_program: Option<solana_program::pubkey::Pubkey>,
}

impl SellNftTokenPool {
    pub fn instruction(
        &self,
        args: SellNftTokenPoolInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SellNftTokenPoolInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(29 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.seller,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rent_payer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whitelist,
            false,
        ));
        if let Some(mint_proof) = self.mint_proof {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                mint_proof, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.seller_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.edition,
            false,
        ));
        if let Some(owner_token_record) = self.owner_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                owner_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(seller_token_record) = self.seller_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                seller_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(pool_token_record) = self.pool_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                pool_token_record,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                token_metadata_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                sysvar_instructions,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                authorization_rules_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(shared_escrow) = self.shared_escrow {
            accounts.push(solana_program::instruction::AccountMeta::new(
                shared_escrow,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                maker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                taker_broker,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                cosigner, true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_program,
            false,
        ));
        if let Some(escrow_program) = self.escrow_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                escrow_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = SellNftTokenPoolInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TENSOR_AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct SellNftTokenPoolInstructionData {
    discriminator: [u8; 8],
}

impl SellNftTokenPoolInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [57, 44, 192, 48, 83, 8, 107, 48],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellNftTokenPoolInstructionArgs {
    pub min_price: u64,
    pub authorization_data: Option<AuthorizationDataLocal>,
    pub optional_royalty_pct: Option<u16>,
}

/// Instruction builder for `SellNftTokenPool`.
///
/// ### Accounts:
///
///   0. `[writable]` owner
///   1. `[writable, signer]` seller
///   2. `[writable]` rent_payer
///   3. `[writable]` fee_vault
///   4. `[writable]` pool
///   5. `[]` whitelist
///   6. `[optional]` mint_proof
///   7. `[writable]` seller_ta
///   8. `[writable]` owner_ata
///   9. `[writable]` pool_ata
///   10. `[]` mint
///   11. `[writable]` metadata
///   12. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   13. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   15. `[]` edition
///   16. `[writable, optional]` owner_token_record
///   17. `[writable, optional]` seller_token_record
///   18. `[writable, optional]` pool_token_record
///   19. `[optional]` token_metadata_program
///   20. `[optional]` sysvar_instructions
///   21. `[optional]` authorization_rules
///   22. `[optional]` authorization_rules_program
///   23. `[writable, optional]` shared_escrow
///   24. `[writable, optional]` maker_broker
///   25. `[writable, optional]` taker_broker
///   26. `[signer, optional]` cosigner
///   27. `[optional]` amm_program (default to `TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA`)
///   28. `[optional]` escrow_program
#[derive(Default)]
pub struct SellNftTokenPoolBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    seller: Option<solana_program::pubkey::Pubkey>,
    rent_payer: Option<solana_program::pubkey::Pubkey>,
    fee_vault: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    whitelist: Option<solana_program::pubkey::Pubkey>,
    mint_proof: Option<solana_program::pubkey::Pubkey>,
    seller_ta: Option<solana_program::pubkey::Pubkey>,
    owner_ata: Option<solana_program::pubkey::Pubkey>,
    pool_ata: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    metadata: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    edition: Option<solana_program::pubkey::Pubkey>,
    owner_token_record: Option<solana_program::pubkey::Pubkey>,
    seller_token_record: Option<solana_program::pubkey::Pubkey>,
    pool_token_record: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    authorization_rules: Option<solana_program::pubkey::Pubkey>,
    authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    shared_escrow: Option<solana_program::pubkey::Pubkey>,
    maker_broker: Option<solana_program::pubkey::Pubkey>,
    taker_broker: Option<solana_program::pubkey::Pubkey>,
    cosigner: Option<solana_program::pubkey::Pubkey>,
    amm_program: Option<solana_program::pubkey::Pubkey>,
    escrow_program: Option<solana_program::pubkey::Pubkey>,
    min_price: Option<u64>,
    authorization_data: Option<AuthorizationDataLocal>,
    optional_royalty_pct: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SellNftTokenPoolBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The owner of the pool and the buyer/recipient of the NFT.
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// The seller is the owner of the NFT who is selling the NFT into the pool.
    #[inline(always)]
    pub fn seller(&mut self, seller: solana_program::pubkey::Pubkey) -> &mut Self {
        self.seller = Some(seller);
        self
    }
    /// The original rent payer of the pool--stored on the pool. Used to refund rent in case the pool
    /// is auto-closed.
    #[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_payer = Some(rent_payer);
        self
    }
    /// Fee vault account owned by the TFEE program.
    #[inline(always)]
    pub fn fee_vault(&mut self, fee_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_vault = Some(fee_vault);
        self
    }
    /// The Pool state account that the NFT is being sold into. Stores pool state and config,
    /// but is also the owner of any NFTs in the pool, and also escrows any SOL.
    /// Any active pool can be specified provided it is a Token type and the NFT passes at least one
    /// whitelist condition.
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    /// The whitelist account that the pool uses to verify the NFTs being sold into it.
    #[inline(always)]
    pub fn whitelist(&mut self, whitelist: solana_program::pubkey::Pubkey) -> &mut Self {
        self.whitelist = Some(whitelist);
        self
    }
    /// `[optional account]`
    /// Optional account which must be passed in if the NFT must be verified against a
    /// merkle proof condition in the whitelist.
    #[inline(always)]
    pub fn mint_proof(&mut self, mint_proof: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.mint_proof = mint_proof;
        self
    }
    /// The token account of the NFT for the seller's wallet.
    #[inline(always)]
    pub fn seller_ta(&mut self, seller_ta: solana_program::pubkey::Pubkey) -> &mut Self {
        self.seller_ta = Some(seller_ta);
        self
    }
    /// The ATA of the owner, where the NFT will be transferred to as a result of this sale.
    #[inline(always)]
    pub fn owner_ata(&mut self, owner_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner_ata = Some(owner_ata);
        self
    }
    /// The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale.
    #[inline(always)]
    pub fn pool_ata(&mut self, pool_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_ata = Some(pool_ata);
        self
    }
    /// The mint account of the NFT being sold.
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// The Token Metadata metadata account of the NFT.
    #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Either the legacy token program or token-2022.
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// The SPL associated token program.
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The Solana system program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// The Token Metadata edition account of the NFT.
    #[inline(always)]
    pub fn edition(&mut self, edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.edition = Some(edition);
        self
    }
    /// `[optional account]`
    /// The Token Metadata owner/buyer token record account of the NFT.
    #[inline(always)]
    pub fn owner_token_record(
        &mut self,
        owner_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.owner_token_record = owner_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata seller/source token record account of the NFT.
    #[inline(always)]
    pub fn seller_token_record(
        &mut self,
        seller_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.seller_token_record = seller_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata token record for the pool.
    #[inline(always)]
    pub fn pool_token_record(
        &mut self,
        pool_token_record: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.pool_token_record = pool_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata program account.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.token_metadata_program = token_metadata_program;
        self
    }
    /// `[optional account]`
    /// The sysvar instructions account.
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.sysvar_instructions = sysvar_instructions;
        self
    }
    /// `[optional account]`
    /// The Metaplex Token Authority Rules account that stores royalty enforcement rules.
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    /// The Metaplex Token Authority Rules program account.
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    /// The shared escrow account for pools that have liquidity in a shared account.
    #[inline(always)]
    pub fn shared_escrow(
        &mut self,
        shared_escrow: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.shared_escrow = shared_escrow;
        self
    }
    /// `[optional account]`
    /// The account that receives the maker broker fee.
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_broker = maker_broker;
        self
    }
    /// `[optional account]`
    /// The account that receives the taker broker fee.
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    /// The optional cosigner account that must be passed in if the pool has a cosigner.
    /// Checks are performed in the handler.
    #[inline(always)]
    pub fn cosigner(&mut self, cosigner: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.cosigner = cosigner;
        self
    }
    /// `[optional account, default to 'TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA']`
    /// The AMM program account, used for self-cpi logging.
    #[inline(always)]
    pub fn amm_program(&mut self, amm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_program = Some(amm_program);
        self
    }
    /// `[optional account]`
    /// The escrow program account for shared liquidity pools.
    #[inline(always)]
    pub fn escrow_program(
        &mut self,
        escrow_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.escrow_program = escrow_program;
        self
    }
    #[inline(always)]
    pub fn min_price(&mut self, min_price: u64) -> &mut Self {
        self.min_price = Some(min_price);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authorization_data(&mut self, authorization_data: AuthorizationDataLocal) -> &mut Self {
        self.authorization_data = Some(authorization_data);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SellNftTokenPool {
            owner: self.owner.expect("owner is not set"),
            seller: self.seller.expect("seller is not set"),
            rent_payer: self.rent_payer.expect("rent_payer is not set"),
            fee_vault: self.fee_vault.expect("fee_vault is not set"),
            pool: self.pool.expect("pool is not set"),
            whitelist: self.whitelist.expect("whitelist is not set"),
            mint_proof: self.mint_proof,
            seller_ta: self.seller_ta.expect("seller_ta is not set"),
            owner_ata: self.owner_ata.expect("owner_ata is not set"),
            pool_ata: self.pool_ata.expect("pool_ata is not set"),
            mint: self.mint.expect("mint is not set"),
            metadata: self.metadata.expect("metadata is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            edition: self.edition.expect("edition is not set"),
            owner_token_record: self.owner_token_record,
            seller_token_record: self.seller_token_record,
            pool_token_record: self.pool_token_record,
            token_metadata_program: self.token_metadata_program,
            sysvar_instructions: self.sysvar_instructions,
            authorization_rules: self.authorization_rules,
            authorization_rules_program: self.authorization_rules_program,
            shared_escrow: self.shared_escrow,
            maker_broker: self.maker_broker,
            taker_broker: self.taker_broker,
            cosigner: self.cosigner,
            amm_program: self.amm_program.unwrap_or(solana_program::pubkey!(
                "TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA"
            )),
            escrow_program: self.escrow_program,
        };
        let args = SellNftTokenPoolInstructionArgs {
            min_price: self.min_price.clone().expect("min_price is not set"),
            authorization_data: self.authorization_data.clone(),
            optional_royalty_pct: self.optional_royalty_pct.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `sell_nft_token_pool` CPI accounts.
pub struct SellNftTokenPoolCpiAccounts<'a, 'b> {
    /// The owner of the pool and the buyer/recipient of the NFT.
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The seller is the owner of the NFT who is selling the NFT into the pool.
    pub seller: &'b solana_program::account_info::AccountInfo<'a>,
    /// The original rent payer of the pool--stored on the pool. Used to refund rent in case the pool
    /// is auto-closed.
    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee vault account owned by the TFEE program.
    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Pool state account that the NFT is being sold into. Stores pool state and config,
    /// but is also the owner of any NFTs in the pool, and also escrows any SOL.
    /// Any active pool can be specified provided it is a Token type and the NFT passes at least one
    /// whitelist condition.
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The whitelist account that the pool uses to verify the NFTs being sold into it.
    pub whitelist: &'b solana_program::account_info::AccountInfo<'a>,
    /// Optional account which must be passed in if the NFT must be verified against a
    /// merkle proof condition in the whitelist.
    pub mint_proof: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The token account of the NFT for the seller's wallet.
    pub seller_ta: &'b solana_program::account_info::AccountInfo<'a>,
    /// The ATA of the owner, where the NFT will be transferred to as a result of this sale.
    pub owner_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale.
    pub pool_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint account of the NFT being sold.
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata metadata account of the NFT.
    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Either the legacy token program or token-2022.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SPL associated token program.
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana system program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata edition account of the NFT.
    pub edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata owner/buyer token record account of the NFT.
    pub owner_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata seller/source token record account of the NFT.
    pub seller_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata token record for the pool.
    pub pool_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata program account.
    pub token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The sysvar instructions account.
    pub sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Metaplex Token Authority Rules account that stores royalty enforcement rules.
    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Metaplex Token Authority Rules program account.
    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The shared escrow account for pools that have liquidity in a shared account.
    pub shared_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account that receives the maker broker fee.
    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account that receives the taker broker fee.
    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The optional cosigner account that must be passed in if the pool has a cosigner.
    /// Checks are performed in the handler.
    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The AMM program account, used for self-cpi logging.
    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The escrow program account for shared liquidity pools.
    pub escrow_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `sell_nft_token_pool` CPI instruction.
pub struct SellNftTokenPoolCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The owner of the pool and the buyer/recipient of the NFT.
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The seller is the owner of the NFT who is selling the NFT into the pool.
    pub seller: &'b solana_program::account_info::AccountInfo<'a>,
    /// The original rent payer of the pool--stored on the pool. Used to refund rent in case the pool
    /// is auto-closed.
    pub rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee vault account owned by the TFEE program.
    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Pool state account that the NFT is being sold into. Stores pool state and config,
    /// but is also the owner of any NFTs in the pool, and also escrows any SOL.
    /// Any active pool can be specified provided it is a Token type and the NFT passes at least one
    /// whitelist condition.
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The whitelist account that the pool uses to verify the NFTs being sold into it.
    pub whitelist: &'b solana_program::account_info::AccountInfo<'a>,
    /// Optional account which must be passed in if the NFT must be verified against a
    /// merkle proof condition in the whitelist.
    pub mint_proof: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The token account of the NFT for the seller's wallet.
    pub seller_ta: &'b solana_program::account_info::AccountInfo<'a>,
    /// The ATA of the owner, where the NFT will be transferred to as a result of this sale.
    pub owner_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale.
    pub pool_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint account of the NFT being sold.
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata metadata account of the NFT.
    pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Either the legacy token program or token-2022.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SPL associated token program.
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana system program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata edition account of the NFT.
    pub edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Metadata owner/buyer token record account of the NFT.
    pub owner_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata seller/source token record account of the NFT.
    pub seller_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata token record for the pool.
    pub pool_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Token Metadata program account.
    pub token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The sysvar instructions account.
    pub sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Metaplex Token Authority Rules account that stores royalty enforcement rules.
    pub authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The Metaplex Token Authority Rules program account.
    pub authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The shared escrow account for pools that have liquidity in a shared account.
    pub shared_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account that receives the maker broker fee.
    pub maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The account that receives the taker broker fee.
    pub taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The optional cosigner account that must be passed in if the pool has a cosigner.
    /// Checks are performed in the handler.
    pub cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The AMM program account, used for self-cpi logging.
    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The escrow program account for shared liquidity pools.
    pub escrow_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: SellNftTokenPoolInstructionArgs,
}

impl<'a, 'b> SellNftTokenPoolCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SellNftTokenPoolCpiAccounts<'a, 'b>,
        args: SellNftTokenPoolInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            seller: accounts.seller,
            rent_payer: accounts.rent_payer,
            fee_vault: accounts.fee_vault,
            pool: accounts.pool,
            whitelist: accounts.whitelist,
            mint_proof: accounts.mint_proof,
            seller_ta: accounts.seller_ta,
            owner_ata: accounts.owner_ata,
            pool_ata: accounts.pool_ata,
            mint: accounts.mint,
            metadata: accounts.metadata,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            edition: accounts.edition,
            owner_token_record: accounts.owner_token_record,
            seller_token_record: accounts.seller_token_record,
            pool_token_record: accounts.pool_token_record,
            token_metadata_program: accounts.token_metadata_program,
            sysvar_instructions: accounts.sysvar_instructions,
            authorization_rules: accounts.authorization_rules,
            authorization_rules_program: accounts.authorization_rules_program,
            shared_escrow: accounts.shared_escrow,
            maker_broker: accounts.maker_broker,
            taker_broker: accounts.taker_broker,
            cosigner: accounts.cosigner,
            amm_program: accounts.amm_program,
            escrow_program: accounts.escrow_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(29 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.seller.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rent_payer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whitelist.key,
            false,
        ));
        if let Some(mint_proof) = self.mint_proof {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *mint_proof.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.seller_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.edition.key,
            false,
        ));
        if let Some(owner_token_record) = self.owner_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *owner_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(seller_token_record) = self.seller_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *seller_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(pool_token_record) = self.pool_token_record {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *pool_token_record.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *token_metadata_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *sysvar_instructions.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(authorization_rules) = self.authorization_rules {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *authorization_rules_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(shared_escrow) = self.shared_escrow {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *shared_escrow.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(maker_broker) = self.maker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *maker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(taker_broker) = self.taker_broker {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *taker_broker.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        if let Some(cosigner) = self.cosigner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *cosigner.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_program.key,
            false,
        ));
        if let Some(escrow_program) = self.escrow_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *escrow_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TENSOR_AMM_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = SellNftTokenPoolInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TENSOR_AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(29 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.seller.clone());
        account_infos.push(self.rent_payer.clone());
        account_infos.push(self.fee_vault.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.whitelist.clone());
        if let Some(mint_proof) = self.mint_proof {
            account_infos.push(mint_proof.clone());
        }
        account_infos.push(self.seller_ta.clone());
        account_infos.push(self.owner_ata.clone());
        account_infos.push(self.pool_ata.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.metadata.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.edition.clone());
        if let Some(owner_token_record) = self.owner_token_record {
            account_infos.push(owner_token_record.clone());
        }
        if let Some(seller_token_record) = self.seller_token_record {
            account_infos.push(seller_token_record.clone());
        }
        if let Some(pool_token_record) = self.pool_token_record {
            account_infos.push(pool_token_record.clone());
        }
        if let Some(token_metadata_program) = self.token_metadata_program {
            account_infos.push(token_metadata_program.clone());
        }
        if let Some(sysvar_instructions) = self.sysvar_instructions {
            account_infos.push(sysvar_instructions.clone());
        }
        if let Some(authorization_rules) = self.authorization_rules {
            account_infos.push(authorization_rules.clone());
        }
        if let Some(authorization_rules_program) = self.authorization_rules_program {
            account_infos.push(authorization_rules_program.clone());
        }
        if let Some(shared_escrow) = self.shared_escrow {
            account_infos.push(shared_escrow.clone());
        }
        if let Some(maker_broker) = self.maker_broker {
            account_infos.push(maker_broker.clone());
        }
        if let Some(taker_broker) = self.taker_broker {
            account_infos.push(taker_broker.clone());
        }
        if let Some(cosigner) = self.cosigner {
            account_infos.push(cosigner.clone());
        }
        account_infos.push(self.amm_program.clone());
        if let Some(escrow_program) = self.escrow_program {
            account_infos.push(escrow_program.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SellNftTokenPool` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` owner
///   1. `[writable, signer]` seller
///   2. `[writable]` rent_payer
///   3. `[writable]` fee_vault
///   4. `[writable]` pool
///   5. `[]` whitelist
///   6. `[optional]` mint_proof
///   7. `[writable]` seller_ta
///   8. `[writable]` owner_ata
///   9. `[writable]` pool_ata
///   10. `[]` mint
///   11. `[writable]` metadata
///   12. `[]` token_program
///   13. `[]` associated_token_program
///   14. `[]` system_program
///   15. `[]` edition
///   16. `[writable, optional]` owner_token_record
///   17. `[writable, optional]` seller_token_record
///   18. `[writable, optional]` pool_token_record
///   19. `[optional]` token_metadata_program
///   20. `[optional]` sysvar_instructions
///   21. `[optional]` authorization_rules
///   22. `[optional]` authorization_rules_program
///   23. `[writable, optional]` shared_escrow
///   24. `[writable, optional]` maker_broker
///   25. `[writable, optional]` taker_broker
///   26. `[signer, optional]` cosigner
///   27. `[]` amm_program
///   28. `[optional]` escrow_program
pub struct SellNftTokenPoolCpiBuilder<'a, 'b> {
    instruction: Box<SellNftTokenPoolCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SellNftTokenPoolCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SellNftTokenPoolCpiBuilderInstruction {
            __program: program,
            owner: None,
            seller: None,
            rent_payer: None,
            fee_vault: None,
            pool: None,
            whitelist: None,
            mint_proof: None,
            seller_ta: None,
            owner_ata: None,
            pool_ata: None,
            mint: None,
            metadata: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            edition: None,
            owner_token_record: None,
            seller_token_record: None,
            pool_token_record: None,
            token_metadata_program: None,
            sysvar_instructions: None,
            authorization_rules: None,
            authorization_rules_program: None,
            shared_escrow: None,
            maker_broker: None,
            taker_broker: None,
            cosigner: None,
            amm_program: None,
            escrow_program: None,
            min_price: None,
            authorization_data: None,
            optional_royalty_pct: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The owner of the pool and the buyer/recipient of the NFT.
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// The seller is the owner of the NFT who is selling the NFT into the pool.
    #[inline(always)]
    pub fn seller(
        &mut self,
        seller: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.seller = Some(seller);
        self
    }
    /// The original rent payer of the pool--stored on the pool. Used to refund rent in case the pool
    /// is auto-closed.
    #[inline(always)]
    pub fn rent_payer(
        &mut self,
        rent_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_payer = Some(rent_payer);
        self
    }
    /// Fee vault account owned by the TFEE program.
    #[inline(always)]
    pub fn fee_vault(
        &mut self,
        fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_vault = Some(fee_vault);
        self
    }
    /// The Pool state account that the NFT is being sold into. Stores pool state and config,
    /// but is also the owner of any NFTs in the pool, and also escrows any SOL.
    /// Any active pool can be specified provided it is a Token type and the NFT passes at least one
    /// whitelist condition.
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    /// The whitelist account that the pool uses to verify the NFTs being sold into it.
    #[inline(always)]
    pub fn whitelist(
        &mut self,
        whitelist: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.whitelist = Some(whitelist);
        self
    }
    /// `[optional account]`
    /// Optional account which must be passed in if the NFT must be verified against a
    /// merkle proof condition in the whitelist.
    #[inline(always)]
    pub fn mint_proof(
        &mut self,
        mint_proof: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.mint_proof = mint_proof;
        self
    }
    /// The token account of the NFT for the seller's wallet.
    #[inline(always)]
    pub fn seller_ta(
        &mut self,
        seller_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.seller_ta = Some(seller_ta);
        self
    }
    /// The ATA of the owner, where the NFT will be transferred to as a result of this sale.
    #[inline(always)]
    pub fn owner_ata(
        &mut self,
        owner_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owner_ata = Some(owner_ata);
        self
    }
    /// The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale.
    #[inline(always)]
    pub fn pool_ata(
        &mut self,
        pool_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_ata = Some(pool_ata);
        self
    }
    /// The mint account of the NFT being sold.
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// The Token Metadata metadata account of the NFT.
    #[inline(always)]
    pub fn metadata(
        &mut self,
        metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata = Some(metadata);
        self
    }
    /// Either the legacy token program or token-2022.
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// The SPL associated token program.
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    /// The Solana system program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// The Token Metadata edition account of the NFT.
    #[inline(always)]
    pub fn edition(
        &mut self,
        edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.edition = Some(edition);
        self
    }
    /// `[optional account]`
    /// The Token Metadata owner/buyer token record account of the NFT.
    #[inline(always)]
    pub fn owner_token_record(
        &mut self,
        owner_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.owner_token_record = owner_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata seller/source token record account of the NFT.
    #[inline(always)]
    pub fn seller_token_record(
        &mut self,
        seller_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.seller_token_record = seller_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata token record for the pool.
    #[inline(always)]
    pub fn pool_token_record(
        &mut self,
        pool_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.pool_token_record = pool_token_record;
        self
    }
    /// `[optional account]`
    /// The Token Metadata program account.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = token_metadata_program;
        self
    }
    /// `[optional account]`
    /// The sysvar instructions account.
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = sysvar_instructions;
        self
    }
    /// `[optional account]`
    /// The Metaplex Token Authority Rules account that stores royalty enforcement rules.
    #[inline(always)]
    pub fn authorization_rules(
        &mut self,
        authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules = authorization_rules;
        self
    }
    /// `[optional account]`
    /// The Metaplex Token Authority Rules program account.
    #[inline(always)]
    pub fn authorization_rules_program(
        &mut self,
        authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.authorization_rules_program = authorization_rules_program;
        self
    }
    /// `[optional account]`
    /// The shared escrow account for pools that have liquidity in a shared account.
    #[inline(always)]
    pub fn shared_escrow(
        &mut self,
        shared_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.shared_escrow = shared_escrow;
        self
    }
    /// `[optional account]`
    /// The account that receives the maker broker fee.
    #[inline(always)]
    pub fn maker_broker(
        &mut self,
        maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_broker = maker_broker;
        self
    }
    /// `[optional account]`
    /// The account that receives the taker broker fee.
    #[inline(always)]
    pub fn taker_broker(
        &mut self,
        taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.taker_broker = taker_broker;
        self
    }
    /// `[optional account]`
    /// The optional cosigner account that must be passed in if the pool has a cosigner.
    /// Checks are performed in the handler.
    #[inline(always)]
    pub fn cosigner(
        &mut self,
        cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.cosigner = cosigner;
        self
    }
    /// The AMM program account, used for self-cpi logging.
    #[inline(always)]
    pub fn amm_program(
        &mut self,
        amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_program = Some(amm_program);
        self
    }
    /// `[optional account]`
    /// The escrow program account for shared liquidity pools.
    #[inline(always)]
    pub fn escrow_program(
        &mut self,
        escrow_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.escrow_program = escrow_program;
        self
    }
    #[inline(always)]
    pub fn min_price(&mut self, min_price: u64) -> &mut Self {
        self.instruction.min_price = Some(min_price);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authorization_data(&mut self, authorization_data: AuthorizationDataLocal) -> &mut Self {
        self.instruction.authorization_data = Some(authorization_data);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn optional_royalty_pct(&mut self, optional_royalty_pct: u16) -> &mut Self {
        self.instruction.optional_royalty_pct = Some(optional_royalty_pct);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SellNftTokenPoolInstructionArgs {
            min_price: self
                .instruction
                .min_price
                .clone()
                .expect("min_price is not set"),
            authorization_data: self.instruction.authorization_data.clone(),
            optional_royalty_pct: self.instruction.optional_royalty_pct.clone(),
        };
        let instruction = SellNftTokenPoolCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            seller: self.instruction.seller.expect("seller is not set"),

            rent_payer: self.instruction.rent_payer.expect("rent_payer is not set"),

            fee_vault: self.instruction.fee_vault.expect("fee_vault is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            whitelist: self.instruction.whitelist.expect("whitelist is not set"),

            mint_proof: self.instruction.mint_proof,

            seller_ta: self.instruction.seller_ta.expect("seller_ta is not set"),

            owner_ata: self.instruction.owner_ata.expect("owner_ata is not set"),

            pool_ata: self.instruction.pool_ata.expect("pool_ata is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            metadata: self.instruction.metadata.expect("metadata is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            edition: self.instruction.edition.expect("edition is not set"),

            owner_token_record: self.instruction.owner_token_record,

            seller_token_record: self.instruction.seller_token_record,

            pool_token_record: self.instruction.pool_token_record,

            token_metadata_program: self.instruction.token_metadata_program,

            sysvar_instructions: self.instruction.sysvar_instructions,

            authorization_rules: self.instruction.authorization_rules,

            authorization_rules_program: self.instruction.authorization_rules_program,

            shared_escrow: self.instruction.shared_escrow,

            maker_broker: self.instruction.maker_broker,

            taker_broker: self.instruction.taker_broker,

            cosigner: self.instruction.cosigner,

            amm_program: self
                .instruction
                .amm_program
                .expect("amm_program is not set"),

            escrow_program: self.instruction.escrow_program,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SellNftTokenPoolCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    whitelist: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_proof: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    seller_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authorization_rules_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    shared_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    maker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    taker_broker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cosigner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    min_price: Option<u64>,
    authorization_data: Option<AuthorizationDataLocal>,
    optional_royalty_pct: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
