{
  "version": "0.0.0",
  "name": "amm_program",
  "constants": [
    {
      "name": "CURRENT_TSWAP_VERSION",
      "type": "u8",
      "value": "0"
    },
    {
      "name": "CURRENT_POOL_VERSION",
      "type": "u8",
      "value": "2"
    },
    {
      "name": "MAX_MM_FEES_BPS",
      "type": "u16",
      "value": "9999"
    },
    {
      "name": "HUNDRED_PCT_BPS",
      "type": "u16",
      "value": "10000"
    },
    {
      "name": "MAX_DELTA_BPS",
      "type": "u16",
      "value": "9999"
    },
    {
      "name": "SPREAD_TICKS",
      "type": "u8",
      "value": "1"
    },
    {
      "name": "TSWAP_TAKER_FEE_BPS",
      "type": "u16",
      "value": "150"
    },
    {
      "name": "MAKER_REBATE_BPS",
      "type": "u16",
      "value": "25"
    },
    {
      "name": "SNIPE_FEE_BPS",
      "type": "u16",
      "value": "150"
    },
    {
      "name": "SNIPE_MIN_FEE",
      "type": "u64",
      "value": "10000000"
    },
    {
      "name": "SNIPE_PROFIT_SHARE_BPS",
      "type": "u16",
      "value": "2000"
    },
    {
      "name": "TAKER_BROKER_PCT",
      "type": "u64",
      "value": "0"
    },
    {
      "name": "DEPOSIT_RECEIPT_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + 1 + 32 * 3"
    },
    {
      "name": "POOL_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + (2 * 1) + 32 + 8 * 3 + (2 * 1) + (2 * 8) + 1 + 3 + (3 * 32) + (32 + 8) + (3 * 4) + (2 * 4) + 8 + (2 * 32) + 4 + 100"
    },
    {
      "name": "POOL_STATE_BOND",
      "type": "u64",
      "value": "3814080"
    },
    {
      "name": "SINGLE_LISTING_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + (32 * 2) + 8 + 1 + 64"
    }
  ],
  "instructions": [
    {
      "name": "reallocPool",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        }
      ]
    },
    {
      "name": "createPool",
      "accounts": [
        {
          "name": "rentPayer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Needed for pool seeds derivation / will be stored inside pool"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreatePoolArgs"
          }
        }
      ]
    },
    {
      "name": "editPool",
      "accounts": [
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "EditPoolArgs"
          }
        }
      ]
    },
    {
      "name": "closePool",
      "accounts": [
        {
          "name": "rentPayer",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "closeExpiredPool",
      "accounts": [
        {
          "name": "rentPayer",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "depositNft",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The owner of the pool and the NFT."
          ]
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The whitelist that gatekeeps which NFTs can be deposited into the pool."
          ]
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the owner, where the NFT will be transferred from."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT will be escrowed."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT. It should be the mint account common",
            "to the owner_ata and pool_ata."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The NFT receipt account denoting that an NFT has been deposited into a pool."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadata",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata metadata account of the NFT."
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "edition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata edition account of the NFT."
          ]
        },
        {
          "name": "ownerTokenRecord",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata owner/buyer token record account of the NFT."
          ]
        },
        {
          "name": "poolTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata pool token record account of the NFT."
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata program account."
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The sysvar instructions account."
          ]
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules program account."
          ]
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules account that stores royalty enforcement rules."
          ]
        }
      ],
      "args": [
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        }
      ]
    },
    {
      "name": "feeCrank",
      "accounts": [
        {
          "name": "treasury",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Fee destination account"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "feeSeeds",
          "type": {
            "vec": {
              "defined": "FeeSeeds"
            }
          }
        }
      ]
    },
    {
      "name": "withdrawNft",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The owner of the pool and will receive the NFT at the owner_ata account."
          ]
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The pool from which the NFT will be withdrawn."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the owner, where the NFT will be transferred to as a result of this action."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT token is escrowed."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "edition",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata pool temporary token record account of the NFT."
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata program account."
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The sysvar instructions account."
          ]
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules program account."
          ]
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules account that stores royalty enforcement rules."
          ]
        }
      ],
      "args": [
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        },
        {
          "name": "rulesAccPresent",
          "type": "bool"
        }
      ]
    },
    {
      "name": "depositSol",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "lamports",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawSol",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The owner of the pool and will receive the SOL."
          ]
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The pool from which the SOL will be withdrawn."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "lamports",
          "type": "u64"
        }
      ]
    },
    {
      "name": "buyNft",
      "accounts": [
        {
          "name": "owner",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Owner is the pool owner who created the pool and the nominal owner of the",
            "escrowed NFT. In this transaction they are the seller, though the transfer",
            "of the NFT is handled by the pool."
          ]
        },
        {
          "name": "buyer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Buyer is the external signer who sends SOL to the pool to purchase the escrowed NFT."
          ]
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "buyerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the buyer, where the NFT will be transferred."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT is held."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT. It should be the mint account common",
            "to the owner_ata, pool_ata and the mint stored in the nft receipt."
          ]
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata metadata account of the NFT."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The NFT deposit receipt account, which tracks an NFT to the pool it was deposited to."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "edition",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "poolTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata token record for the pool."
          ]
        },
        {
          "name": "buyerTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata token record for the buyer."
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata program account."
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The sysvar instructions account."
          ]
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules program account."
          ]
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules account that stores royalty enforcement rules."
          ]
        },
        {
          "name": "sharedEscrow",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The shared escrow account for pools that pool liquidity in a shared account."
          ]
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The taker broker account that receives the taker fees."
          ]
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        }
      ],
      "args": [
        {
          "name": "maxPrice",
          "type": "u64"
        },
        {
          "name": "rulesAccPresent",
          "type": "bool"
        },
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        },
        {
          "name": "optionalRoyaltyPct",
          "type": {
            "option": "u16"
          }
        }
      ]
    },
    {
      "name": "sellNftTokenPool",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The owner of the pool and the buyer/recipient of the NFT."
          ]
        },
        {
          "name": "seller",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The seller is the owner of the NFT who is selling the NFT into the pool."
          ]
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Pool state account that the NFT is being sold into. Stores pool state and config,",
            "but is also the owner of any NFTs in the pool, and also escrows any SOL.",
            "Any pool can be specified provided it is a Token type and the NFT passes at least one",
            "whitelist condition."
          ]
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The whitelist account that the pool uses to verify the NFTs being sold into it."
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Optional account which must be passed in if the NFT must be verified against a",
            "merkle proof condition in the whitelist."
          ]
        },
        {
          "name": "sellerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The token account of the NFT for the seller's wallet."
          ]
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the owner, where the NFT will be transferred to as a result of this sale."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT token is temporarily escrowed as a result of this sale."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT being sold."
          ]
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata metadata account of the NFT."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Either the legacy token program or token-2022."
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The SPL associated token program."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The SPL system program."
          ]
        },
        {
          "name": "edition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata edition account of the NFT."
          ]
        },
        {
          "name": "ownerTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata owner/buyer token record account of the NFT."
          ]
        },
        {
          "name": "sellerTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata seller/source token record account of the NFT."
          ]
        },
        {
          "name": "poolTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata pool temporary token record account of the NFT."
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata program account."
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The sysvar instructions account."
          ]
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules program account."
          ]
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules account that stores royalty enforcement rules."
          ]
        },
        {
          "name": "sharedEscrow",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The shared escrow account for pools that pool liquidity in a shared account."
          ]
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The taker broker account that receives the taker fees."
          ]
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "cosigner",
          "isMut": false,
          "isSigner": true,
          "isOptional": true,
          "docs": [
            "The optional cosigner account that must be passed in if the pool has a cosigner.",
            "Checks are performed in the handler."
          ]
        }
      ],
      "args": [
        {
          "name": "minPrice",
          "type": "u64"
        },
        {
          "name": "rulesAccPresent",
          "type": "bool"
        },
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        },
        {
          "name": "optionalRoyaltyPct",
          "type": {
            "option": "u16"
          }
        }
      ]
    },
    {
      "name": "sellNftTradePool",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The owner of the pool and the buyer/recipient of the NFT."
          ]
        },
        {
          "name": "seller",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The seller is the owner of the NFT who is selling the NFT into the pool."
          ]
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Pool state account that the NFT is being sold into. Stores pool state and config,",
            "but is also the owner of any NFTs in the pool, and also escrows any SOL.",
            "Any pool can be specified provided it is a Trade type and the NFT passes at least one",
            "whitelist condition."
          ]
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The whitelist account that the pool uses to verify the NFTs being sold into it."
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Optional account which must be passed in if the NFT must be verified against a",
            "merkle proof condition in the whitelist."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT being sold."
          ]
        },
        {
          "name": "sellerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The token account of the NFT for the seller's wallet."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata metadata account of the NFT."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "edition",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "sellerTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata seller/source token record account of the NFT."
          ]
        },
        {
          "name": "poolTokenRecord",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The Token Metadata pool temporary token record account of the NFT."
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Token Metadata program account."
          ]
        },
        {
          "name": "instructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The sysvar instructions account."
          ]
        },
        {
          "name": "authorizationRulesProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules program account."
          ]
        },
        {
          "name": "authRules",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Metaplex Token Authority Rules account that stores royalty enforcement rules."
          ]
        },
        {
          "name": "sharedEscrow",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The shared escrow account for pools that pool liquidity in a shared account."
          ]
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The taker broker account that receives the taker fees."
          ]
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "cosigner",
          "isMut": false,
          "isSigner": true,
          "isOptional": true,
          "docs": [
            "The optional cosigner account that must be passed in if the pool has a cosigner.",
            "Checks are performed in the handler."
          ]
        }
      ],
      "args": [
        {
          "name": "minPrice",
          "type": "u64"
        },
        {
          "name": "rulesAccPresent",
          "type": "bool"
        },
        {
          "name": "authorizationData",
          "type": {
            "option": {
              "defined": "AuthorizationDataLocal"
            }
          }
        },
        {
          "name": "optionalRoyaltyPct",
          "type": {
            "option": "u16"
          }
        }
      ]
    },
    {
      "name": "buyNftT22",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "buyer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Needed for pool seeds derivation, has_one = whitelist on pool"
          ]
        },
        {
          "name": "buyerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the buyer, where the NFT will be transferred."
          ]
        },
        {
          "name": "poolAta",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT will be escrowed."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "sharedEscrowAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        },
        {
          "name": "maxPrice",
          "type": "u64"
        }
      ]
    },
    {
      "name": "depositNftT22",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Needed for pool seeds derivation, also checked via has_one on pool"
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the owner, where the NFT will be transferred from."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT will be escrowed."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        }
      ]
    },
    {
      "name": "sellNftTokenPoolT22",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "seller",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Needed for pool seeds derivation, also checked via has_one on pool"
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT being sold."
          ]
        },
        {
          "name": "sellerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the NFT for the seller's wallet."
          ]
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the owner, where the NFT will be transferred to as a result of this sale."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "sharedEscrowAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        },
        {
          "name": "minPrice",
          "type": "u64"
        }
      ]
    },
    {
      "name": "sellNftTradePoolT22",
      "accounts": [
        {
          "name": "owner",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "seller",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "feeVault",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Needed for pool seeds derivation, also checked via has_one on pool"
          ]
        },
        {
          "name": "mintProof",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account of the NFT being sold."
          ]
        },
        {
          "name": "sellerAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the NFT for the seller's wallet."
          ]
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "sharedEscrowAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "takerBroker",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "makerBroker",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        },
        {
          "name": "minPrice",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawNftT22",
      "accounts": [
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Tied to the pool because used to verify pool seeds"
          ]
        },
        {
          "name": "pool",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "ownerAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "poolAta",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The ATA of the pool, where the NFT token is escrowed."
          ]
        },
        {
          "name": "nftReceipt",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": "PoolConfig"
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "NftDepositReceipt",
      "docs": [
        "Represents NFTs deposited into a Trade or NFT pool.",
        "Seeds: \"nft_receipt\", mint, pool"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "mint",
            "type": "publicKey"
          },
          {
            "name": "pool",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "Pool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "version",
            "docs": [
              "Pool version, used to control upgrades."
            ],
            "type": "u8"
          },
          {
            "name": "bump",
            "docs": [
              "Bump seed for the pool PDA."
            ],
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "poolId",
            "docs": [
              "Owner-chosen identifier for the pool"
            ],
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "createdAt",
            "docs": [
              "Unix timestamp of the pool creation, in seconds."
            ],
            "type": "i64"
          },
          {
            "name": "updatedAt",
            "docs": [
              "Unix timestamp of the last time the pool has been updated, in seconds."
            ],
            "type": "i64"
          },
          {
            "name": "expiry",
            "docs": [
              "Unix timestamp of when the pool expires, in seconds."
            ],
            "type": "i64"
          },
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "name": "whitelist",
            "type": "publicKey"
          },
          {
            "name": "rentPayer",
            "type": "publicKey"
          },
          {
            "name": "currency",
            "type": {
              "defined": "Currency"
            }
          },
          {
            "name": "amount",
            "docs": [
              "The amount of currency held in the pool"
            ],
            "type": "u64"
          },
          {
            "name": "priceOffset",
            "docs": [
              "The difference between the number of buys and sells",
              "where a postive number indicates the taker has BOUGHT more NFTs than sold",
              "and a negative number indicates the taker has SOLD more NFTs than bought.",
              "This is used to calculate the current price of the pool."
            ],
            "type": "i32"
          },
          {
            "name": "nftsHeld",
            "type": "u32"
          },
          {
            "name": "stats",
            "type": {
              "defined": "PoolStats"
            }
          },
          {
            "name": "sharedEscrow",
            "docs": [
              "If an escrow account is present, means it's a shared-escrow pool"
            ],
            "type": {
              "defined": "NullableOption<Pubkey>"
            }
          },
          {
            "name": "cosigner",
            "docs": [
              "Offchain actor signs off to make sure an offchain condition is met (eg trait present)"
            ],
            "type": {
              "defined": "NullableOption<Pubkey>"
            }
          },
          {
            "name": "maxTakerSellCount",
            "docs": [
              "Limit how many buys a pool can execute - useful for shared escrow pools, else keeps buying into infinitya"
            ],
            "type": "u32"
          },
          {
            "name": "config",
            "type": {
              "defined": "PoolConfig"
            }
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                100
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SingleListing",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner",
            "type": "publicKey"
          },
          {
            "name": "nftMint",
            "type": "publicKey"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "bump",
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ]
      }
    },
    {
      "name": "FeeVault",
      "docs": [
        "Sharded fee accounts",
        "Seeds: \"fee_vault\", number, bump",
        "There are up to 256 fee accounts, and the number in the seed",
        "is found by getting the last byte of mint pubkey."
      ],
      "type": {
        "kind": "struct",
        "fields": []
      }
    }
  ],
  "types": [
    {
      "name": "CreatePoolArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "poolId",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "config",
            "type": {
              "defined": "PoolConfig"
            }
          },
          {
            "name": "currency",
            "type": "publicKey"
          },
          {
            "name": "cosigner",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "orderType",
            "type": "u8"
          },
          {
            "name": "maxTakerSellCount",
            "type": {
              "option": "u32"
            }
          },
          {
            "name": "expireInSec",
            "type": {
              "option": "u64"
            }
          }
        ]
      }
    },
    {
      "name": "EditPoolArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newConfig",
            "type": {
              "option": {
                "defined": "PoolConfig"
              }
            }
          },
          {
            "name": "cosigner",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "expireInSec",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "maxTakerSellCount",
            "type": {
              "option": "u32"
            }
          },
          {
            "name": "resetPriceOffset",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "FeeSeeds",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "shard",
            "type": "u8"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "PoolConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "poolType",
            "type": {
              "defined": "PoolType"
            }
          },
          {
            "name": "curveType",
            "type": {
              "defined": "CurveType"
            }
          },
          {
            "name": "startingPrice",
            "type": "u64"
          },
          {
            "name": "delta",
            "type": "u64"
          },
          {
            "name": "mmCompoundFees",
            "docs": [
              "Trade pools only"
            ],
            "type": "bool"
          },
          {
            "name": "mmFeeBps",
            "type": {
              "defined": "NullableOption<u16>"
            }
          }
        ]
      }
    },
    {
      "name": "PoolStats",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "takerSellCount",
            "type": "u32"
          },
          {
            "name": "takerBuyCount",
            "type": "u32"
          },
          {
            "name": "accumulatedMmProfit",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "AuthorizationDataLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "payload",
            "type": {
              "vec": {
                "defined": "TaggedPayload"
              }
            }
          }
        ]
      }
    },
    {
      "name": "TaggedPayload",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "payload",
            "type": {
              "defined": "PayloadTypeLocal"
            }
          }
        ]
      }
    },
    {
      "name": "SeedsVecLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seeds",
            "docs": [
              "The vector of derivation seeds."
            ],
            "type": {
              "vec": "bytes"
            }
          }
        ]
      }
    },
    {
      "name": "ProofInfoLocal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proof",
            "docs": [
              "The merkle proof."
            ],
            "type": {
              "vec": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "PoolType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Token"
          },
          {
            "name": "NFT"
          },
          {
            "name": "Trade"
          }
        ]
      }
    },
    {
      "name": "CurveType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Linear"
          },
          {
            "name": "Exponential"
          }
        ]
      }
    },
    {
      "name": "Direction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Up"
          },
          {
            "name": "Down"
          }
        ]
      }
    },
    {
      "name": "TakerSide",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Buy"
          },
          {
            "name": "Sell"
          }
        ]
      }
    },
    {
      "name": "PayloadTypeLocal",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pubkey",
            "fields": [
              "publicKey"
            ]
          },
          {
            "name": "Seeds",
            "fields": [
              {
                "defined": "SeedsVecLocal"
              }
            ]
          },
          {
            "name": "MerkleProof",
            "fields": [
              {
                "defined": "ProofInfoLocal"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              "u64"
            ]
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "BuySellEvent",
      "fields": [
        {
          "name": "currentPrice",
          "type": "u64",
          "index": true
        },
        {
          "name": "tswapFee",
          "type": "u64",
          "index": true
        },
        {
          "name": "mmFee",
          "type": "u64",
          "index": true
        },
        {
          "name": "creatorsFee",
          "type": "u64",
          "index": true
        }
      ]
    },
    {
      "name": "DelistEvent",
      "fields": [
        {
          "name": "currentPrice",
          "type": "u64",
          "index": true
        }
      ]
    }
  ],
  "errors": [
    {
      "code": 12000,
      "name": "InvalidProof",
      "msg": "invalid merkle proof, token not whitelisted"
    },
    {
      "code": 12001,
      "name": "WhitelistNotVerified",
      "msg": "whitelist not verified -- currently only verified pools supported"
    },
    {
      "code": 12002,
      "name": "BadWhitelist",
      "msg": "unexpected whitelist address"
    },
    {
      "code": 12003,
      "name": "WrongPoolType",
      "msg": "operation not permitted on this pool type"
    },
    {
      "code": 12004,
      "name": "BadFeeAccount",
      "msg": "fee account doesn't match that stored on pool"
    },
    {
      "code": 12005,
      "name": "BadEscrowAccount",
      "msg": "escrow account doesn't match that stored on pool"
    },
    {
      "code": 12006,
      "name": "MissingFees",
      "msg": "when setting up a Trade pool, must provide fee bps & fee vault"
    },
    {
      "code": 12007,
      "name": "FeesTooHigh",
      "msg": "fees entered above allowed threshold"
    },
    {
      "code": 12008,
      "name": "DeltaTooLarge",
      "msg": "delta too large"
    },
    {
      "code": 12009,
      "name": "ArithmeticError",
      "msg": "arithmetic error"
    },
    {
      "code": 12010,
      "name": "WrongPool",
      "msg": "this nft doesnt belong to this pool"
    },
    {
      "code": 12011,
      "name": "RoyaltiesEnabled",
      "msg": "royalties are enabled always"
    },
    {
      "code": 12012,
      "name": "PriceMismatch",
      "msg": "specified price not within current price"
    },
    {
      "code": 12013,
      "name": "ExistingNfts",
      "msg": "cannot close pool with nfts in escrow -- withdraw all before closing"
    },
    {
      "code": 12014,
      "name": "WrongMint",
      "msg": "wrong mint passed for provided accounts"
    },
    {
      "code": 12015,
      "name": "InsufficientTswapAccBalance",
      "msg": "insufficient Tswap account balance"
    },
    {
      "code": 12016,
      "name": "BadOwner",
      "msg": "bad owner"
    },
    {
      "code": 12017,
      "name": "FeesNotAllowed",
      "msg": "fees not allowed for non-trade pools"
    },
    {
      "code": 12018,
      "name": "BadMetadata",
      "msg": "metadata account does not match"
    },
    {
      "code": 12019,
      "name": "CreatorMismatch",
      "msg": "provided creator address does not match metadata creator"
    },
    {
      "code": 12020,
      "name": "WrongPoolVersion",
      "msg": "wrong pool version provided"
    },
    {
      "code": 12021,
      "name": "PoolsAreTheSame",
      "msg": "new pool should not match old pool"
    },
    {
      "code": 12022,
      "name": "WrongAuthority",
      "msg": "wrong nft authority account provided"
    },
    {
      "code": 12023,
      "name": "FrozenAmountMismatch",
      "msg": "amount frozen doesnt match current price"
    },
    {
      "code": 12024,
      "name": "BadMintProof",
      "msg": "mint proof account does not match"
    },
    {
      "code": 12025,
      "name": "BadCosigner",
      "msg": "bad cosigner passed - either wrong key or no signature"
    },
    {
      "code": 12026,
      "name": "PoolFrozen",
      "msg": "pool is frozen and cannot execute normal operations"
    },
    {
      "code": 12027,
      "name": "BadSharedEscrow",
      "msg": "bad shared escrow account passed"
    },
    {
      "code": 12028,
      "name": "PoolNotOnSharedEscrow",
      "msg": "expected a shared escrow pool to be passed in"
    },
    {
      "code": 12029,
      "name": "PoolOnSharedEscrow",
      "msg": "expected a non-shared escrow pool to be passed in"
    },
    {
      "code": 12030,
      "name": "WrongOrderType",
      "msg": "wrong order type"
    },
    {
      "code": 12031,
      "name": "WrongFrozenStatus",
      "msg": "wrong frozen status"
    },
    {
      "code": 12032,
      "name": "SharedEscrowInUse",
      "msg": "shared escrow account has pools open and is in use"
    },
    {
      "code": 12033,
      "name": "MaxTakerSellCountExceeded",
      "msg": "max taker sell count exceeded, pool cannot buy anymore NFTs"
    },
    {
      "code": 12034,
      "name": "MaxTakerSellCountTooSmall",
      "msg": "max taker sell count is too small"
    },
    {
      "code": 12035,
      "name": "BadRuleSet",
      "msg": "rule set for programmable nft does not match"
    },
    {
      "code": 12036,
      "name": "PoolFeesCompounded",
      "msg": "this pool compounds fees and they cannot be withdrawn separately"
    },
    {
      "code": 12037,
      "name": "BadRoyaltiesPct",
      "msg": "royalties percentage passed in must be between 0 and 100"
    },
    {
      "code": 12038,
      "name": "StartingPriceTooSmall",
      "msg": "starting price can't be smaller than 1 lamport"
    },
    {
      "code": 12039,
      "name": "PoolKeepAlive",
      "msg": "Pool must keep minimum rent balance"
    },
    {
      "code": 12040,
      "name": "WrongRentPayer",
      "msg": "Wrong rent payer"
    },
    {
      "code": 12041,
      "name": "SplTokensNotSupported",
      "msg": "SPL tokens not supported"
    },
    {
      "code": 12042,
      "name": "ExpiryTooLarge",
      "msg": "Expiry too large"
    },
    {
      "code": 12043,
      "name": "ExpiredPool",
      "msg": "Expired Pool"
    },
    {
      "code": 12044,
      "name": "PoolNotExpired",
      "msg": "Pool not expired"
    },
    {
      "code": 12045,
      "name": "InvalidFeeCrank",
      "msg": "Invalid fee crank"
    }
  ],
  "metadata": {
    "address": "TAMMqgJYcquwwj2tCdNUerh4C2bJjmghijVziSEf5tA",
    "origin": "anchor",
    "binaryVersion": "0.29.0",
    "libVersion": "0.29.0"
  }
}